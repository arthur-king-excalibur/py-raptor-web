# Generated by Django 4.2.3 on 2023-09-24 00:45

from django.db import migrations, models
import django.db.models.deletion
import django_resized.forms


class Migration(migrations.Migration):

    replaces = [('raptormc', '0001_initial'), ('raptormc', '0002_siteinformation'), ('raptormc', '0003_alter_siteinformation_options_and_more'), ('raptormc', '0004_alter_siteinformation_background_image_and_more'), ('raptormc', '0005_navbarlink'), ('raptormc', '0006_navbarlink_new_tab_alter_navbarlink_enabled_and_more'), ('raptormc', '0007_navbardropdown_navbarlink_parent_dropdown'), ('raptormc', '0008_alter_navbardropdown_options'), ('raptormc', '0009_navbardropdown_priority_navbarlink_priority'), ('raptormc', '0010_alter_navbarlink_parent_dropdown'), ('raptormc', '0011_alter_navbarlink_parent_dropdown'), ('raptormc', '0012_notificationtoast'), ('raptormc', '0013_alter_notificationtoast_options'), ('raptormc', '0014_notificationtoast_enabled'), ('raptormc', '0015_page'), ('raptormc', '0016_navbarlink_linked_page'), ('raptormc', '0017_alter_navbarlink_url'), ('raptormc', '0018_navwidgetbar_alter_navbarlink_linked_page_navwidget'), ('raptormc', '0019_alter_navwidget_options_alter_navwidgetbar_options'), ('raptormc', '0020_siteinformation_meta_description_and_more'), ('raptormc', '0021_page_meta_description_page_meta_keywords_and_more'), ('raptormc', '0022_alter_page_meta_description_alter_page_meta_keywords'), ('raptormc', '0023_alter_page_meta_description_alter_page_meta_keywords_and_more'), ('raptormc', '0024_siteinformation_avatar_image'), ('raptormc', '0025_siteinformation_ico_image_and_more'), ('raptormc', '0026_siteinformation_time_last_saved'), ('raptormc', '0027_smallsiteinformation_and_more'), ('raptormc', '0028_alter_smallsiteinformation_options_and_more'), ('raptormc', '0029_alter_smallsiteinformation_ico_image'), ('raptormc', '0030_alter_smallsiteinformation_ico_image'), ('raptormc', '0031_alter_siteinformation_avatar_image_and_more'), ('raptormc', '0032_alter_smallsiteinformation_ico_image'), ('raptormc', '0033_alter_smallsiteinformation_ico_image'), ('raptormc', '0034_alter_smallsiteinformation_ico_image'), ('raptormc', '0035_alter_smallsiteinformation_ico_image'), ('raptormc', '0036_defaultpages'), ('raptormc', '0037_alter_defaultpages_options'), ('raptormc', '0038_siteinformation_use_main_color_and_more'), ('raptormc', '0039_alter_siteinformation_options_and_more')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='InformativeText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('name', models.CharField(default='Default', max_length=50, verbose_name='Content Name')),
                ('content', models.CharField(default='', max_length=15000, verbose_name='Content')),
            ],
            options={
                'verbose_name': ('Informative Text',),
                'verbose_name_plural': 'Informative Texts',
            },
        ),
        migrations.CreateModel(
            name='NavbarDropdown',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default', help_text='The name of this Navigation Dropdown. Will be displayed on the website.', max_length=100, verbose_name='Navigation Link Name')),
                ('enabled', models.BooleanField(default=True, help_text='Whether this Navigation Link will appear on the website.', verbose_name='Enabled')),
                ('priority', models.IntegerField(default=0, help_text='Controls the order this Navigation Dropdown will be placed in. Lower numbers appear first.', verbose_name='Priority')),
            ],
            options={
                'verbose_name': ('Navigation Drodown',),
                'verbose_name_plural': 'Navigation Dropdowns',
            },
        ),
        migrations.CreateModel(
            name='NotificationToast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The title of this notification that will appear on the website', max_length=100, verbose_name='Notification Name')),
                ('message', models.CharField(default='', help_text='The message for this notification', max_length=15000, verbose_name='Message')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('enabled', models.BooleanField(default=True, help_text='Whether this Notification will appear on the website', verbose_name='Enabled')),
            ],
            options={
                'verbose_name': ('Notification Toast',),
                'verbose_name_plural': 'Notification Toasts',
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of this page, will be displayed at the top, before the page content.', max_length=100, verbose_name='Name')),
                ('content', models.TextField(default='', help_text='The content of this page.', max_length=15000, verbose_name='Content')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('show_gameservers', models.BooleanField(default=True, help_text='If this is checked, this page will display Server buttons in the usual location.', verbose_name='Show Servers')),
                ('meta_description', models.CharField(blank=True, default='', help_text='The description for this page provided in search engine results. This will apply only to this page, overriding default.', max_length=500, verbose_name='SEO Description')),
                ('meta_keywords', models.CharField(blank=True, default='', help_text='The comma-separated keywords for this page used in search engine results. This will apply only to this page, overriding default.', max_length=500, verbose_name='SEO Keywords')),
            ],
            options={
                'verbose_name': ('Page',),
                'verbose_name_plural': 'Pages',
            },
        ),
        migrations.CreateModel(
            name='NavWidgetBar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default', help_text='The name of this Nav Widget Bar. Only used for internal identification.', max_length=100, verbose_name='Nav Widget Bar Name')),
                ('enabled', models.BooleanField(default=True, help_text='Whether this Nav Widget Bar will appear on the website.', verbose_name='Enabled')),
                ('priority', models.IntegerField(default=0, help_text='Controls the order this Nav Widget Bar will be placed in. Lower numbers appear first.', verbose_name='Priority')),
            ],
            options={
                'verbose_name': ('Nav Widget Bar',),
                'verbose_name_plural': 'Nav Widget Bars',
            },
        ),
        migrations.CreateModel(
            name='NavbarLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default', help_text='The name of this Navigation Link. Will be displayed on the website.', max_length=100, verbose_name='Navigation Link Name')),
                ('url', models.URLField(default='https://google.com', help_text='The link this Navigation Link will take the user to.', max_length=250, verbose_name='Navigation URL')),
                ('enabled', models.BooleanField(default=True, help_text='Whether this Navigation Link will appear on the website.', verbose_name='Enabled')),
                ('new_tab', models.BooleanField(default=False, help_text='If this is True, this link will open in a new tab.', verbose_name='Opens in New Tab')),
                ('parent_dropdown', models.ForeignKey(blank=True, help_text='The Dropdown Menu this link is attached to. This is not required', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='nestedlink', to='raptormc.navbardropdown', verbose_name='Dropdown Menu')),
                ('priority', models.IntegerField(default=0, help_text='Controls the order this Navigation Link will be placed in. Lower numbers appear first.', verbose_name='Priority')),
                ('linked_page', models.ForeignKey(blank=True, help_text='The Page Model that this Navigation Link will lead to. If this is set, then the Navigation URL field will be ignored.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='linktopage', to='raptormc.page', verbose_name='Linked Page')),
            ],
            options={
                'verbose_name': ('Navigation Link',),
                'verbose_name_plural': 'Navigation Links',
            },
        ),
        migrations.CreateModel(
            name='NavWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default', help_text='The name of this Navigation Button. Will be displayed on the website. if a Widget Image is not used.', max_length=100, verbose_name='Navigation Link Name')),
                ('nav_image', models.ImageField(blank=True, help_text='The image used as an identifier/name for this Nav Widget. Optimal size for this image is w250xh72 or within the same aspect ratio.', upload_to='navwidgetimage', verbose_name='Nav Widget Image')),
                ('url', models.URLField(default='https://google.com', help_text='The link this Navigation button will take the user to.', max_length=250, verbose_name='Navigation URL')),
                ('enabled', models.BooleanField(default=True, help_text='Whether this Navigation Button will appear on the website.', verbose_name='Enabled')),
                ('priority', models.IntegerField(default=0, help_text='Controls the order this Navigation Button will be placed in. Lower numbers appear first.', verbose_name='Priority')),
                ('new_tab', models.BooleanField(default=False, help_text='If this is True, this Button will open in a new tab.', verbose_name='Opens in New Tab')),
                ('linked_page', models.ForeignKey(blank=True, help_text='The Page Model that this Navigation Button will lead to. If this is set, then the Navigation URL field will be ignored.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='widgettopage', to='raptormc.page', verbose_name='Linked Page')),
                ('parent_bar', models.ForeignKey(blank=True, help_text='The Nav Widget Bar this link is attached to. A Nav Widget will appear in the default Nav Widget Bar. if one is not specified here', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='nestednavwidget', to='raptormc.navwidgetbar', verbose_name='Linked Nav Widget Bar')),
            ],
            options={
                'verbose_name': ('Nav Widget',),
                'verbose_name_plural': 'Nav Widgets',
            },
        ),
        migrations.CreateModel(
            name='SmallSiteInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ico_image', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='ICO', keep_meta=True, quality=5, scale=None, size=[64, 64], upload_to='ico')),
            ],
            options={
                'verbose_name': ('Site Information',),
                'verbose_name_plural': 'Site Information',
            },
        ),
        migrations.CreateModel(
            name='DefaultPages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('announcements', models.BooleanField(default=True, help_text='Whether the default Announcement page is enabled or not.', verbose_name='Announcements Page')),
                ('rules', models.BooleanField(default=True, help_text='Whether the default Rules page is enabled or not.', verbose_name='Rules Page')),
                ('banned_items', models.BooleanField(default=True, help_text='Whether the default Banned Items page is enabled or not.', verbose_name='Banned Items Page')),
                ('voting', models.BooleanField(default=True, help_text='Whether the default Vote for Us page is enabled or not.', verbose_name='Voting Page')),
                ('joining', models.BooleanField(default=True, help_text='Whether the default How to Join page is enabled or not.', verbose_name='How to Join Page')),
                ('staff_apps', models.BooleanField(default=True, help_text='Whether the default Staff Applications page is enabled or not.', verbose_name='Staff Applications Page')),
                ('members', models.BooleanField(default=True, help_text='Whether the default Site Members page is enabled or not.', verbose_name='Site Members Page')),
            ],
            options={
                'verbose_name': ('Default Pages',),
                'verbose_name_plural': 'Default Pages',
            },
        ),
        migrations.CreateModel(
            name='SiteInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(default='Default', help_text='The name of your website and/or network', max_length=100, verbose_name='Website/Network Name')),
                ('main_color', models.CharField(default='#00192d', help_text='The hex color code used for the lower body of the website', max_length=7, verbose_name='Main Color')),
                ('secondary_color', models.CharField(default='#00233c', help_text='The hex color code used for the upper body of the website, layered underneath server buttons', max_length=7, verbose_name='Secondary Color')),
                ('branding_image', models.ImageField(blank=True, help_text='The image displayed in the website Navigation Bar as a link to the homepage. Optimal size for this image is w800xh200.', upload_to='branding', verbose_name='Branding Image')),
                ('background_image', models.ImageField(blank=True, help_text='The image displayed layered behind server buttons. This image will cover the defined Secondary Color if used. Optimal size for this image  is 1920x1080 or within the same aspect ratio.', upload_to='background', verbose_name='Background Image')),
                ('meta_description', models.CharField(blank=True, default='', help_text='The description for your website provided in search engine results. This will apply to all pages that do not override.', max_length=500, verbose_name='SEO - Meta Description')),
                ('meta_keywords', models.CharField(blank=True, default='', help_text='A series of comma-separated values that represent meta keywords used in search engine results. This will apply to all pages that do not override.', max_length=500, verbose_name='SEO - Meta Keywords')),
                ('avatar_image', models.ImageField(blank=True, help_text='The image displayed in OpenGraph embeds, such as when a link is pasted to a Discord Channel or a Twitter post. This should be a 1x1 image. This will also be used as your Favicon, after being converted to a .ico file.', upload_to='avatar', verbose_name='Avatar Image')),
                ('use_main_color', models.BooleanField(default=True, help_text="If this is checked, the Main Color chosen above will be used on the website. If not, the color determined from the user's current Light/Dark theme choice will be used instead.", verbose_name='Use Main Color')),
                ('use_secondary_color', models.BooleanField(default=True, help_text="If this is checked, the Secondary Color chosen above will be used on the website. If not, the color determined from the user's current Light/Dark theme choice will be used instead. If you are using a Background Image, that will always take precedence.", verbose_name='Use Secondary Color')),
                ('contact_email', models.EmailField(blank=True, default='', help_text='Email to be linked with a mailto in the footer of the website.', max_length=500, verbose_name='Contact Email')),
                ('enable_footer', models.BooleanField(default=True, help_text='If this is checked, the footer will be enabled', verbose_name='Enable Footer')),
                ('enable_footer_contact', models.BooleanField(default=True, help_text='If this is checked, a mailto link will appear in the footer, addressed to the defined contact email.', verbose_name='Enable Email in Footer')),
                ('enable_footer_credit', models.BooleanField(default=True, help_text="If this is checked, link to Zediious' GitHub profile will appear in the footer. This has no effect if Enable Footer is disabled.", verbose_name='Enable Credits in Footer')),
            ],
            options={
                'verbose_name': ('Site Settings',),
                'verbose_name_plural': 'Site Settings',
            },
        ),
    ]
